###preprocessing
setwd("/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Immport/WGCNA/")
library(WGCNA)
#数据预处理,确保表达谱与临床信息样本顺序的匹配
expression_data <- read.csv("/mnt/raid5/User/bailin/project/240909Carotid.plaque/data/GSE43292/preprocessing/exp_norm.csv",row.names = 1)
datExpr <- as.data.frame(t(expression_data))  # 转置以适应 WGCNA 的输入格式
dim(datExpr)
# 检查数据是否有明显缺失值
gsg <- goodSamplesGenes(datExpr, verbose = 3)
if (!gsg$allOK) {
  datExpr <- datExpr[gsg$goodSamples, gsg$goodGenes]  # 过滤掉低质量样本或基因
}
dim(gsg)
# clinical_data 是与样本相关的临床特征矩阵
sample_names <- colnames(expression_data)
last_digit <- as.numeric(substring(sample_names, nchar(sample_names)))
group <- ifelse(last_digit %% 2 == 1, "normal", "case")
group_numeric <- ifelse(group == "normal", 0, 1)
clinical_data <- data.frame(Sample = sample_names, Group = group_numeric)
print(clinical_data)
datTraits <- clinical_data
rownames(datTraits) <- datTraits$Sample
datTraits$Sample <- NULL
head(datTraits)
# 设置多线程并行处理，优化速度
options(stringsAsFactors = FALSE)
allowWGCNAThreads()
type <- "unsigned"

### 选择软阈值功率（beta）
powers <- c(1:10, seq(from = 12, to=30, by=2))
sft <- pickSoftThreshold( datExpr , powerVector=powers,   networkType=type, verbose=3)
# 画出软阈值图，帮助选择合适的beta值
library(ggplot2)
par(mfrow = c(1,2))
cex1 = 0.9
# 横轴是Soft threshold (power)，纵轴是无标度网络的评估参数，数值越高，
# 网络越符合无标度特征 (non-scale)
pdf("fig.15.pdf",, width = 10, height = 10)
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],     
     xlab="Soft Threshold (power)",     
     ylab="Scale Free Topology Model Fit,signed R^2",type="n",     
     main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],     
     labels=powers,cex=cex1,col="red")
# 筛选标准,R-square=0.85
abline(h=0.85,col="red")
dev.off()

# Soft threshold与平均连通性
pdf("fig.16.pdf",, width = 10, height = 10)
plot(sft$fitIndices[,1], sft$fitIndices[,5],     
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",     
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers,      
     cex=cex1, col="red")
dev.off()
#查看系统推荐的阈值
sft$powerEstimate
softPower <- 22  # 上一步的结果

###构建共表达网络
net <- blockwiseModules(datExpr,  
                        power = 5,  #最大模块数量  
                        maxBlockSize = 2000,  
                        TOMType = type, 
                        minModuleSize = 30, 
                        reassignThreshold = 0.05, #需要合并模块的阈值  
                        mergeCutHeight = 0.15, #以数字作为模块的名字 
                        numericLabels = TRUE,  
                        pamRespectsDendro = FALSE,  
                        saveTOMs = TRUE,  
                        saveTOMFileBase = "CA", 
                        verbose = 3)
table(net$colors) #查看各模块的基因数量
moduleLabels = net$colors
moduleColors = net$colors
pdf("fig.17.pdf", width = 10, height = 10)
plotDendroAndColors(net$dendrograms[[1]], 
                    moduleColors[net$blockGenes[[1]]], 
                    "Module colors",                    
                    dendroLabels = FALSE, 
                    hang = 0.03, 
                    addGuide = TRUE, 
                    guideHang = 0.05)
dev.off()
###模块之间的相关性
MEs_col = MEs
library(tidyverse)
colnames(MEs_col) = paste0("ME", labels2colors(as.numeric(str_replace_all(colnames(MEs),"ME",""))))
MEs_col = orderMEs(MEs_col)
pdf("fig.18.pdf", width = 10, height = 10)
plotEigengeneNetworks(MEs_col, "Eigengene adjacency heatmap",                      
                      marDendro = c(3,3,2,4),                    
                      marHeatmap = c(3,4,2,2), plotDendrograms = T,         
                      xLabelsAngle = 90)
dev.off()
###表型相关分析
# 计算模块特征基因与临床特征的相关性
MEs <- moduleEigengenes(datExpr, colors = moduleColors)$eigengenes
MEs <- orderMEs(MEs)  # 根据特征基因值对模块排序
moduleTraitCor <- cor(MEs, datTraits, use = "p")
nSamples <- ncol(expression_data)
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)

# 绘制模块-临床特征相关性热图
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(", signif(moduleTraitPvalue, 1), ")", sep = "")
pdf("fig.19.pdf",, width = 10, height = 10)
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(datTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = blueWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               zlim = c(-1,1))
dev.off()
# 找出与感兴趣的模块最相关的基因
module <- "2"  # 替换为感兴趣的模块颜色,颜色名前不用加“ME”
moduleGenes <- names(datExpr)[which(moduleColors == module)]
write.csv(moduleGenes,"/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Immport/WGCNA/moduleGenes.csv")
#计算基因与模块的相关性
geneModuleMembership <- as.data.frame(cor(datExpr[,moduleGenes], MEs, use = "p"))
write.csv(geneModuleMembership,"/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Immport/WGCNA/geneModuleMembership.csv")
geneModuleMembershipMatrix <- as.matrix(geneModuleMembership)
MMPvalue <- corPvalueStudent(geneModuleMembershipMatrix, nSamples)
a <- rownames(geneModuleMembership)
rownames(MMPvalue) <- a
write.csv(MMPvalue,"/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Immport/WGCNA/MMPvalue.csv")
#计算基因与表型的相关性
geneSignificanceCor <- cor(datExpr, datTraits$Group, use = "p")
write.csv(geneSignificanceCor,"/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Immport/WGCNA/geneSignificanceCor.csv")
geneSignificanceP <- corPvalueStudent(geneSignificanceCor, nSamples)
write.csv(geneSignificanceP,"/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Immport/WGCNA/geneSignificanceP.csv")
#筛选与模块和表型均显著相关的基因
threshold <- 0.05
significantModules <- rownames(MMPvalue)[which(MMPvalue < threshold)]
significantTraits <- rownames(geneSignificanceP)[which(geneSignificanceP < threshold)]
significantGenes <- intersect(significantModules, significantTraits)
print(significantGenes)

column <- paste0("ME", module)
MM <- abs(geneModuleMembership[moduleGenes, column])
GS <- abs(geneSignificanceCor[moduleGenes, 1])
pdf("fig.20.pdf",, width = 10, height = 10)
verboseScatterplot( MM, GS,   
                    xlab = paste("Module Membership in", module, "module"),   
                    ylab = "Gene significance for proliferating",   
                    main = paste("Module membership vs. gene significance\n"),   
                    abline = TRUE, 
                    pch = 21, 
                    cex.main = 1.2,   
                    cex.lab = 1.2, 
                    cex.axis = 1.2, 
                    col = "black", 
                    bg = module  )
dev.off()
#阈值筛选top基因
sign_moduleGenes <- moduleGenes[(GS > 0.5 & MM > 0.8)]
write.csv(sign_moduleGenes,"/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Immport/WGCNA/sign_moduleGenes.csv")
