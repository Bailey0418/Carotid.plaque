###逻辑回归Logistic Regression###
#汇总色氨酸特征基因集
folder_path <- "D:/Project/240903颈动脉斑块/Immport"  # 替换为你的文件夹路径
# 获取文件夹中所有的 .txt 文件名
file_list <- list.files(path = folder_path, pattern = "*.txt", full.names = TRUE)
# 批量读取所有 .txt 文件，存储为一个列表
file_data_list <- lapply(file_list, function(file) {
  read.table(file, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
})
# 如果想将所有数据框合并为一个大的数据框（假设它们具有相同的列结构）
combined_data <- do.call(rbind, file_data_list)
# 查看结果
head(combined_data)
Immport <- unique(combined_data)
head(Immport)
write.csv(Immport,"D:/Project/240903颈动脉斑块/Immport/Immport_genelist.csv",row.names = F)

library (VennDiagram)
DEGs <- read.csv("/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/DEG+enrichment/DEGs_filtered_log2FC075.csv")
TR <- read.csv("/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Tryptophan/intersect/signature_gene_set.csv")
a <- intersect(TR$Gene,DEGs$X)
write.csv(a,"/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Tryptophan/intersect/intersection_genes.csv")
venn.diagram(x=list(TR$Gene,DEGs$X),
             scaled = F, # 根据比例显示大小
             alpha= 0.5, #透明度
             lwd=1,lty=1,col=c('#FFFFCC','#CCFFFF'), #圆圈线条粗细、形状、颜色；1 实线, 2 虚线, blank无线条
             label.col ='black' , 
             cex = 2, # 数字大小
             fontface = "bold",  # 字体粗细；加粗bold
             fill=c('#FFFFCC','#CCFFFF'), 
             category.names = c("Tryptophan-related genes", "DEGs") , #标签名
             cat.dist = 0.02, # 标签距离圆圈的远近
             cat.pos = -180, # 标签相对于圆圈的角度cat.pos = c(-10, 10, 135)
             cat.cex = 2, #标签字体大小
             cat.fontface = "bold",  # 标签字体加粗
             cat.col='black' ,   #cat.col=c('#FFFFCC','#CCFFFF',.....)根据相应颜色改变标签颜色
             cat.default.pos = "outer",  # 标签位置, outer内;text 外
             output=TRUE,
             filename="/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Tryptophan/intersect/fig21.svg", 
             imagetype="svg",  # 类型（tiff png svg）                                        
             resolution = 400,  # 分辨率                           
             compression = "lzw")
#数据准备
data1 <- read.csv("/mnt/raid5/User/bailin/project/240909Carotid.plaque/data/GSE43292/preprocessing/exp_norm.csv",row.names = 1)
intersection <- read.csv("/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Tryptophan/intersect/intersection_genes.csv",row.names = 1)
data <- data1[intersection$x,]
head(data)
sample_names <- colnames(data)
# 提取样本名的最后一位
last_digits <- as.numeric(substr(sample_names, nchar(sample_names), nchar(sample_names)))
# 判断奇偶数，奇数为 normal (0)，偶数为 case (1)
labels <- ifelse(last_digits %% 2 == 0, 1, 0)  # 偶数为 case (1), 奇数为 normal (0)
data_t <- t(data)
# 转换为数据框并添加标签列
data_t <- as.data.frame(data_t)
data_t$label <- labels
head(data_t)

library(caTools)
set.seed(123)
# 拆分数据集，80% 用于训练，20% 用于测试
split <- sample.split(data_t$label, SplitRatio = 0.8)
train_data <- subset(data_t, split == TRUE)
test_data <- subset(data_t, split == FALSE)
# 分离训练集和测试集中的特征（X）和标签（y）
# 分离训练集和测试集中的特征（X）和标签（y）
X_train <- train_data[, -ncol(train_data)]  # 移除最后一列标签列 (label)
y_train <- train_data$label
X_test <- test_data[, -ncol(test_data)]     # 同样移除标签列
y_test <- test_data$label
head(X_train)
head(y_train)
# 使用训练集训练逻辑回归模型
model <- glm(y_train ~ ., data = X_train, family = "binomial")
saveRDS(model, file = "logistic_model.rds")
# 查看模型摘要
summary(model)
#绘制Probability Distribution Plot
library(ggplot2)
data_plot <- X_train
predicted_probabilities <- predict(model, newdata = data_plot, type = "response")
data_plot$predicted_probabilities <- predicted_probabilities
pdf("fig2.pdf", width = 10,height = 10)
ggplot(data_plot, aes(x = predicted_probabilities)) +
  geom_density(fill = "blue", alpha = 0.5) +  # 密度图
  labs(title = "Probability Distribution of Predictions", 
       x = "Predicted Probability", 
       y = "Density") +
  theme_minimal()
dev.off()
#绘制Coefficient Plot
library(broom)
model_summary <- tidy(model)
print(model_summary)
library(dotwhisker)
pdf("fig1.pdf", width = 10,height = 10)
dwplot(model) +
  theme_minimal() +
  labs(title = "Coefficient Plot", x = "Coefficient Estimate", y = "Predictor")
dev.off()
# 使用训练好的模型进行预测
predictions_prob <- predict(model, newdata = X_test, type = "response")
# 将概率转化为二分类结果
predictions <- ifelse(predictions_prob > 0.5, 1, 0)
# 查看预测结果
head(predictions)
X_test$predictions <- predictions
pdf("fig3.pdf", width = 10,height = 10)
ggplot(X_test, aes(x = predictions)) +
  geom_density(fill = "blue", alpha = 0.5) +  # 密度图
  labs(title = "Probability Distribution of Predictions", 
       x = "Predicted Probability", 
       y = "Density") +
  theme_minimal()
dev.off()

# 提取回归系数和置信区间
coef <- summary(model)$coefficients  
conf_int <- confint(model)          
exp_coef <- exp(coef[, 1])          
lower_ci <- exp(conf_int[, 1])       
upper_ci <- exp(conf_int[, 2])      
p_values <- coef[, 4]  
forest_data <- data.frame(
  Variable = rownames(coef),   
  Estimate = exp_coef,       
  LowerCI = lower_ci,          
  UpperCI = upper_ci,           
  P.value = p_values           
)
print(forest_data)
forest_data$OR <- format(round(forest_data$Estimate, 2), nsmall = 2)
forest_data$P.value <- formatC(forest_data$P.value, format = "e", digits = 2)
write.csv(forest_data,"/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Tryptophan/Logistic Regression/forest_data.csv")

#模型评估
#1.混淆矩阵评估
library(caret)
conf_matrix <- confusionMatrix(factor(predictions), factor(y_test))
# 假设 y_test 是实际的标签，predictions 是模型预测的类别
# 计算混淆矩阵
conf_matrix <- confusionMatrix(factor(predictions), factor(y_test))
print(conf_matrix)
conf_matrix_df <- as.data.frame(conf_matrix$table)
write.csv(conf_matrix_df, file = "confusion_matrix.csv", row.names = FALSE)
# 打印混淆矩阵的统计指标，例如Accuracy、Sensitivity、Specificity等
stats_df <- as.data.frame(t(conf_matrix$overall))
write.csv(stats_df, file = "confusion_matrix_stats.csv", row.names = FALSE)
# 可选：也可以保存分类统计，例如敏感性和特异性
class_stats_df <- as.data.frame(t(conf_matrix$byClass))
write.csv(class_stats_df, file = "class_stats.csv", row.names = FALSE)

#2.生成ROC曲线并计算AUC值
library(pROC)
roc_curve <- roc(y_test, predictions_prob)
pdf(file = "ROC.pdf", width = 6, height = 6)
# 加载pROC包
library(pROC)
roc_curve <- roc(y_test, predictions_prob)
auc_value <- auc(roc_curve)
# 绘制ROC曲线
pdf(file = "ROC.pdf", width = 6, height = 6)
plot(roc_curve, col = "blue", lwd = 2, main = "ROC Curve with AUC")
# 在图中标注AUC值
text(0.6, 0.4, paste("AUC =", round(auc_value, 3)), col = "red", cex = 1.2)
# 可选择增加轴标签等
xlabel <- "False Positive Rate (1 - Specificity)"
ylabel <- "True Positive Rate (Sensitivity)"
title(main = "ROC Curve", sub = "Blue: ROC curve, Red: AUC")
# 显示网格线
grid()
dev.off()
